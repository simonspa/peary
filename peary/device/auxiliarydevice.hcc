/**
 * Caribou Auxiliary Device header
 */

#ifndef CARIBOU_DEVICE_AUXILIARY_DEF
#define CARIBOU_DEVICE_AUXILIARY_DEF

#include "configuration.hpp"
#include "device.hpp"
#include "interface.hpp"
#include "interface_manager.hpp"

#include <string>

namespace caribou {

  /** Caribou Auxiliary Device class definition
   *
   */
  template <typename T> class auxiliaryDevice : public caribouDevice {

  public:
    /** Default constructor for Caribou devices
     *
     */
    auxiliaryDevice(const caribou::Configuration config, std::string devpath, uint32_t devaddr = 0);

    /** Default destructor for Caribou devices
     */
    virtual ~auxiliaryDevice();

    /** Return the human-readable device name
     */
    virtual std::string getName() = 0;
    virtual std::string getFirmwareVersion() { return std::string(); };

    virtual std::vector<uint32_t> getRawData() { return std::vector<uint32_t>(); };

    virtual void powerOn(){};
    virtual void powerOff(){};
    virtual void powerStatusLog(){};

    virtual void daqStart(){};
    virtual void daqStop(){};
    virtual void exploreInterface(){};
    virtual void setRegister(std::string, uint32_t){};
    virtual uint32_t getRegister(std::string) { return uint32_t(); };
    virtual std::vector<std::pair<std::string, uint32_t>> getRegisters() {
      return std::vector<std::pair<std::string, uint32_t>>();
    };
    virtual void configurePatternGenerator(std::string){};
    virtual void triggerPatternGenerator(bool){};
    virtual std::vector<uint64_t> timestampsPatternGenerator() { return std::vector<uint64_t>(); };
    virtual void configureMatrix(std::string){};
    virtual void setVoltage(std::string, double, double){};
    virtual void setBias(std::string, double){};
    virtual void setInjectionBias(std::string, double){};
    virtual void switchOn(std::string){};
    virtual void switchOff(std::string){};
    virtual void setCurrent(std::string, int, bool){};
    virtual double getVoltage(std::string) { return double(); };
    virtual double getCurrent(std::string) { return double(); };
    virtual double getPower(std::string) { return double(); };
    virtual double getADC(std::string) { return double(); };
    virtual double getADC(uint8_t) { return double(); };

    virtual void configure(){};

    // Controlling the device
    virtual void set(std::string, uint32_t){};
    virtual double get(std::string) { return double(); };

    /** Sending reset signal to the device
     */
    virtual void reset(){};

  protected:
    // Write data to a device which does not contain internal register
    // If readout is intergralpart of write operations, the read values a returned by function.
    typename T::data_type send(const typename T::data_type& data);

    // Write data to a device which does not contain internal register
    // If readout is intergralpart of write operations, the read values a returned by function.
    std::vector<typename T::data_type> send(const std::vector<typename T::data_type>& data);

    // Write data to a device containing internal registers
    // If readout is intergralpart of write operations, the read values a returned by function.
    std::pair<typename T::reg_type, typename T::data_type>
    send(const std::pair<typename T::reg_type, typename T::data_type>& data);

    // Write data to a device containing internal registers
    // If readout is intergralpart of write operations, the read values a returned by function.
    std::vector<typename T::data_type> send(const typename T::reg_type& reg, const std::vector<typename T::data_type>& data);

    // Write data to a device containing internal registers
    // If readout is intergralpart of write operations, the read values a returned by function.
    std::vector<std::pair<typename T::reg_type, typename T::data_type>>
    send(const std::vector<std::pair<typename T::reg_type, typename T::data_type>>& data);

    // Read data from a device which does not contain internal register
    std::vector<typename T::data_type> receive(const unsigned int length = 1);

    // Read data from a device containing internal registers
    std::vector<typename T::data_type> receive(const typename T::reg_type reg, const unsigned int length = 1);

  private:
    /** Device interface address
     */
    std::string _devpath;
    uint32_t _devaddress;

    /** Device configuration object
     */
    caribou::Configuration _config;
  }; // class auxiliaryDevice

} // namespace caribou

#endif /* CARIBOU_DEVICE_AUXILIARY_DEF */
