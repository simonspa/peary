variables:
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - compile
  - format
  - unittest
  - documentation
  - deployment

#######################
# Compilation targets #
#######################

cmp:ubuntu-gcc:
  stage: compile
  tags:
    - docker
  image: gitlab-registry.cern.ch/caribou/peary/ubuntu:latest
  script:
    - export COMPILER_TYPE="gcc"
    - mkdir build
    - cd build
    - cmake -DBUILD_example=ON -DBUILD_server=ON ..
    - make
    - make install
  artifacts:
    paths:
      - build
      - bin
      - lib
    expire_in: 3 hour

cmp:centos7-gcc:
  stage: compile
  tags:
    - docker
  image: clicdp/cc7-base
  before_script:
    - yum install -y readline readline-devel
  script:
    - export COMPILER_TYPE="gcc"
    - source .gitlab-ci.d/init_x86_64.sh
    - mkdir build
    - cd build
    - cmake -GNinja -DBUILD_example=ON -DBUILD_server=ON -DINTERFACE_I2C=OFF -DINTERFACE_SPI=OFF -DINTERFACE_SPI_CLICpix2=OFF ..
    - ninja
    - ninja install
  artifacts:
    paths:
      - build
      - bin
      - lib
    expire_in: 3 hour

cmp:centos7-llvm:
  stage: compile
  tags:
    - docker
  image: clicdp/cc7-base
  before_script:
    - yum install -y readline readline-devel
  script:
    - export COMPILER_TYPE="llvm"
    - source .gitlab-ci.d/init_x86_64.sh
    - mkdir build
    - cd build
    - cmake -GNinja -DBUILD_example=ON -DBUILD_server=ON -DINTERFACE_I2C=OFF -DINTERFACE_SPI=OFF -DINTERFACE_SPI_CLICpix2=OFF ..
    - ninja
    - ninja install
  artifacts:
    paths:
      - build
      - bin
      - lib
    expire_in: 3 hour


############################
# Format and Lint Checking #
############################

# CentOS 7

fmt:centos7-llvm-format:
  stage: format
  tags:
    - docker
  dependencies:
    - cmp:centos7-llvm
  image: clicdp/cc7-base
  script:
    - export COMPILER_TYPE="llvm"
    - source .gitlab-ci.d/init_x86_64.sh
    - cd build/
    - ninja check-format


#############################
# Documentation Compilation #
#############################

# Compile MkDocs user manual:
cmp:usermanual:
    stage: documentation
    tags:
      - docker
    image: gitlab-registry.cern.ch/clicdp/publications/templates/custom_ci_worker:fedora-latex-latest
    dependencies: []
    script:
        - export LC_ALL=C.UTF-8 && export LANG=C.UTF-8
        - mkdir -p public/peary-manual
        - mkdocs build
        - mv site/* public/peary-manual/
    artifacts:
        paths:
          - public
        expire_in: 3 hour



##############
# Deployment #
##############

# Automatically deploy documentation to the website
# Deployment job only executed for new tag pushs, not for every commit.
deploy-documentation:
    stage: deployment
    tags:
      - docker
    # Only run for new tags:
    only:
        - tags
        - test-deploy
    dependencies:
        - cmp:usermanual
    # Docker image with tools to deploy to EOS
    image: gitlab-registry.cern.ch/ci-tools/ci-web-deployer:latest
    script:
        - deploy-eos
    # do not run any globally defined before_script or after_script for this step
    before_script: []
    after_script: []

# Deploy to meta-caribou Yocto distribution
rebuild_meta-caribou:
    stage: deployment
    variables:
      META_CARIBOU_REF_NAME: master
    only:
      - master
    script:
      - "curl -X POST -F token=${META_CARIBOU_TOKEN} -F ref=${META_CARIBOU_REF_NAME} https://gitlab.cern.ch/api/v4/projects/13971/trigger/pipeline"
